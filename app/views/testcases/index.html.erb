<%

# The following code is for adding the jstree library.
# It adds both the javascript library and the corresponding stylesheet.
# You need to put those files into assets into the plugin directy.

content_for :header_tags do %>
  <%= javascript_include_tag 'jstree', :plugin => 'red_jenkins' %>
  <%= stylesheet_link_tag 'default/style.min', :plugin => 'red_jenkins' %>
<% end %>

<h2>Tests</h2>

<% # Button to create a new testcase %>
<%= link_to "Create new manual testcase", new_project_document_path(@project), :class => 'icon icon-add',
      :onclick => 'showAndScrollTo("add-document", "document_title"); return false;' if User.current.allowed_to?(:add_documents, @project) 
%>
<p></p>

Here you can see all the test cases of the project:

<script type="text/javascript">
// After the document is initialized 
$(document).ready(function() {
  $.jstree.defaults.core.themes.variant = "large";
  $('#html1').jstree({
    "plugins" : [ "wholerow" ]
  });
})
</script>
<div class="box tabular" id="html1">
<%
# This method outputs a tree using ul-li-elements which should be wrapped
# by a div that can be transformed by jstree
def listing(map)
    %><ul><%
    map.each do |k, v|
        if v[:type] == "method"
            if v[:status] == "failed"
               %> <li data-jstree='{"icon":"jstree-file"}'><span style="background-color: #F5A9A9;"> <%
            elsif v[:status] == "passed"
               %> <li data-jstree='{"icon":"jstree-file"}'><span style="background-color: #BCF5A9;"> <%
            # If status is "not implemented"
            else
               %> <li data-jstree='{"icon":"jstree-file"}'><span style="background-color: #A9D0F5;"> <%
            end
        else
        # If "opened" is true, the whole tree is opened when accessing the page
        # If "opened" is false, the tree is closed when accessing the page
          %> <li data-jstree='{"opened":false}'> <%
        end
        %>
        <a href="http://localhost/redmine"><%= v[:name] %> </a> 
        <br />

        <% 
        listing(v[:content]) if v[:content].is_a?(::Hash)
        %></li><%
    end
    %></ul><%
end

# This variable is used to build the testcase tree
storedTestcase = {}
# For each testcase t
@testcases.each do |t|
	# add t to the tree
    add storedTestcase, t.path.split("."), t 
end

# Output the tree
listing(storedTestcase)
%>
</div>
<%


%>


